[["index.html", "Spatiotemporal LGCPs Chapter 1 Introduction 1.1 Installing stelfi", " Spatiotemporal LGCPs Charlotte M. Jones-Todd 2021-09-30 Chapter 1 Introduction 1.1 Installing stelfi The stelfi package can be installed from Github: devtools::install_github(&quot;cmjt/stelfi&quot;) 1.1.1 Compiling templates Before using the TMB templates in stelfi you should use compile_stelfi() to compile them: library(stelfi) compile_stelfi() "],["hawkes.html", "Chapter 2 Hawkes process 2.1 The fit_hawkes() function 2.2 Applied examples 2.3 Simulation", " Chapter 2 Hawkes process A univariate Hawkes process is defined to be a self-exciting temporal point process where the conditional intensity function is given by \\[\\lambda(t)= \\mu(t)+ \\Sigma_{i:\\tau_i&lt;t}\\nu(t-\\tau_i)\\] where where \\(\\mu(t)\\) is the background rate of the process and \\(\\Sigma_{i:\\tau_i&lt;t}\\nu(t-\\tau_i)\\) is some historic temporal dependence. 2.1 The fit_hawkes() function args(fit_hawkes) ## function (times, parameters, ...) ## NULL 2.2 Applied examples 2.2.1 Retweets A NIWA scientist found a working USB in the scat of a leopard seal, they then tweeted about it in the hopes of finding its owner. data(retweets_niwa) head(retweets_niwa) ## [1] &quot;2019-02-07 06:50:08 UTC&quot; &quot;2019-02-07 06:50:08 UTC&quot; &quot;2019-02-07 06:49:22 UTC&quot; ## [4] &quot;2019-02-07 06:48:48 UTC&quot; &quot;2019-02-07 06:47:52 UTC&quot; &quot;2019-02-07 06:47:42 UTC&quot; ## numeric time stamps times &lt;- sort(as.numeric(difftime(retweets_niwa ,min(retweets_niwa),units = &quot;mins&quot;))) (#fig:plot hist)Observed counts of retweet times. params &lt;- c(mu = 9, alpha = 3, beta = 10) ## must have compiled TMB templates first use compile_stelfi() fit &lt;- fit_hawkes(times = times,parameters = params) ## print out estimated parameters pars &lt;- get_coefs(fit) ## outer mgc: 0.05723709 ## outer mgc: 0.05219274 ## outer mgc: 0.07775643 ## outer mgc: 0.05014284 ## outer mgc: 0.06433839 ## outer mgc: 0.06230766 ## outer mgc: 0.1479575 ## outer mgc: 0.08345936 pars ## Estimate Std. Error ## mu 0.06407076 0.017770342 ## alpha 0.08018350 0.008060415 ## beta 0.08345936 0.008407143 show_hawkes(times = times, mu = pars[1,1], alpha = pars[2,1], beta = pars[3,1]) Figure 2.1: Fitted intensity (top plot) and observed counts of retweets (bottom). 2.2.2 UK serial killers data(serial_uk) ## make date vector times &lt;- as.Date(paste(serial_uk$Date.of.first.kill, &quot;/01&quot;, sep=&#39;&#39;), &quot;%m/%Y/%d&quot;) times &lt;- sort(lubridate::year(times) + lubridate::month(times)/12 - lubridate::year(min(times))) params &lt;- c(mu = 0.06,alpha = 0.006,beta = 0.01) ## must have compiled TMB templates first use compile_stelfi() fit &lt;- fit_hawkes(times = times,parameters = params) ## print out estimated parameters pars &lt;- get_coefs(fit) ## outer mgc: 0.001155806 ## outer mgc: 0.004937551 ## outer mgc: 0.007238112 ## outer mgc: 0.0008875417 ## outer mgc: 0.001817195 ## outer mgc: 0.004639233 ## outer mgc: 0.004305363 ## outer mgc: 0.07784864 pars ## Estimate Std. Error ## mu 0.07784864 0.03873487 ## alpha 0.06004080 0.03170635 ## beta 0.06514918 0.04405630 show_hawkes(times = times, mu = pars[1,1], alpha = pars[2,1], beta = pars[3,1]) Figure 2.2: Fitted intensity (top plot) and observed counts of UK serial murderers (bottom). 2.2.3 Malaria cases Here we consider data from Using Hawkes Processes to model imported and local malaria cases in near-elimination settings. Data are recorded line lists of individuals with malaria (caused by the Plasmodium vivax parasite) in Yunnan Province, China between 1st January 2011 to 24th September 2013. Data may be downloaded from here as follows. tmp &lt;- tempfile(fileext = &quot;.RData&quot;) download.file(&quot;https://dataverse.harvard.edu/api/access/datafile/4443458&quot;, destfile = tmp) load(tmp) unlink(tmp) str(china_malaria) ## &#39;data.frame&#39;: 2153 obs. of 3 variables: ## $ time_onset : num 0 0 0 0 0 1 2 2 2 2 ... ## $ time_jitter: num 0 0.202 0.372 0.573 0.908 ... ## $ Imported : int 1 0 0 0 1 1 0 1 1 1 ... times &lt;- china_malaria$time_jitter params &lt;- c(mu = 9, alpha = 3, beta = 10) ## must have compiled TMB templates first use compile_stelfi() fit &lt;- fit_hawkes(times = times,parameters = params) ## print out estimated parameters pars &lt;- get_coefs(fit) ## outer mgc: 0.0333126 ## outer mgc: 0.01751538 ## outer mgc: 0.06489582 ## outer mgc: 0.01111469 ## outer mgc: 0.05556643 ## outer mgc: 0.03963868 ## outer mgc: 0.06001498 ## outer mgc: 0.2503022 pars ## Estimate Std. Error ## mu 0.2503022 0.06561333 ## alpha 0.1385181 0.01983419 ## beta 0.1564190 0.02297087 show_hawkes(times = times, mu = pars[1,1], alpha = pars[2,1], beta = pars[3,1]) Figure 2.3: Fitted intensity (top plot) and observed counts of recorded malarial infection (bottom). 2.3 Simulation Set parameters mu &lt;- 0.25 alpha &lt;- 0.13 beta &lt;- 0.15 Option 1 Simulation algorithm as per On Lewis’ simulation method for point processes sim1 &lt;- sim_hawkes(mu = mu, alpha = alpha, beta = beta, plot = TRUE) Option 2 Simulation algorithm as per MLE of Hawkes’ self-exciting point process sim2 &lt;- sim_hawkes(mu = mu, alpha = alpha, beta = beta,n = 250, method = &quot;2&quot;, plot = TRUE) Option 3 Using the TMB likelihood template; below we simulate another realisation from the fitted china_malaria model: sim3 &lt;- fit$simulate() dplyr::glimpse(sim3) ## List of 1 ## $ times: num [1:2153] 2.88 3.36 3.48 6.14 8.83 ... "],["lgcp.html", "Chapter 3 log-Gaussian Cox Process 3.1 The fit_lgcp() function 3.2 Fitting a LGCP", " Chapter 3 log-Gaussian Cox Process 3.1 The fit_lgcp() function args(fit_lgcp) ## function (locs, sp, smesh, tmesh, parameters, covariates, silent, ## ...) ## NULL 3.2 Fitting a LGCP 3.2.1 Spatial only data(xyt) domain &lt;- as(xyt$window, &quot;SpatialPolygons&quot;) locs &lt;- data.frame(x = xyt$x, y = xyt$y) smesh &lt;- INLA::inla.mesh.2d(boundary = INLA::inla.sp2segment(domain), max.edge = 0.75, cutoff = 0.3) fit &lt;- fit_lgcp(locs = locs, sp = domain, smesh = smesh, parameters = c(beta = 0, tau = 1, kappa = 1)) ## Order of parameters: ## [1] &quot;beta&quot; &quot;x&quot; &quot;log_tau&quot; &quot;log_kappa&quot; &quot;atanh_rho&quot; ## Not matching template order: ## [1] &quot;beta&quot; &quot;x&quot; &quot;log_tau&quot; &quot;log_kappa&quot; ## Your parameter list has been re-ordered. ## (Disable this warning with checkParameterOrder=FALSE) ## Optimizing tape... Done ## iter: 1 value: 534.3463 mgc: 10.76379 ustep: 0.6827823 ## iter: 2 value: 397.1872 mgc: 12.70915 ustep: 0.8263238 ## iter: 3 value: 385.679 mgc: 3.166187 ustep: 0.9090326 ## iter: 4 value: 385.4992 mgc: 0.3762095 ustep: 0.9534367 ## iter: 5 value: 385.499 mgc: 0.01007973 ustep: 0.9764432 ## iter: 6 value: 385.499 mgc: 5.399029e-05 ustep: 0.9881526 ## iter: 7 value: 385.499 mgc: 1.984211e-07 ustep: 0.9940592 ## iter: 8 mgc: 6.342769e-10 ## iter: 1 mgc: 6.342769e-10 ## Matching hessian patterns... Done ## outer mgc: 541.4191 ## iter: 1 value: 282.5293 mgc: 2.075785 ustep: 1 ## iter: 2 value: 282.5275 mgc: 0.03264823 ustep: 1 ## iter: 3 value: 282.5275 mgc: 7.871658e-05 ustep: 1 ## iter: 4 mgc: 7.276089e-10 ## iter: 1 mgc: 7.276089e-10 ## outer mgc: 4.166455 ## iter: 1 value: 371.0988 mgc: 4.643818 ustep: 1 ## iter: 2 value: 370.3376 mgc: 0.4191142 ustep: 1 ## iter: 3 value: 370.3372 mgc: 0.01039809 ustep: 1 ## iter: 4 value: 370.3372 mgc: 8.245341e-06 ustep: 1 ## iter: 5 mgc: 1.193795e-11 ## iter: 1 mgc: 1.193795e-11 ## outer mgc: 2.27722 ## iter: 1 value: 420.9599 mgc: 12.90898 ustep: 1 ## iter: 2 value: 377.8876 mgc: 3.274451 ustep: 1 ## iter: 3 value: 376.9409 mgc: 0.434989 ustep: 1 ## iter: 4 value: 376.9403 mgc: 0.01114035 ustep: 1 ## iter: 5 value: 376.9403 mgc: 7.823585e-06 ustep: 1 ## iter: 6 mgc: 3.856915e-12 ## iter: 1 mgc: 3.856915e-12 ## outer mgc: 4.454899 ## iter: 1 value: 8989.436 mgc: 358.5375 ustep: 1 ## iter: 2 value: 2890.988 mgc: 129.5891 ustep: 1 ## iter: 3 value: 1064.355 mgc: 45.30125 ustep: 1 ## iter: 4 value: 683.7126 mgc: 14.39097 ustep: 1 ## iter: 5 value: 650.8102 mgc: 3.471187 ustep: 1 ## iter: 6 value: 650.3926 mgc: 0.3865383 ustep: 1 ## iter: 7 value: 650.3925 mgc: 0.006996776 ustep: 1 ## iter: 8 value: 650.3925 mgc: 2.783676e-06 ustep: 1 ## iter: 9 mgc: 4.842793e-13 ## iter: 1 value: 381.1853 mgc: 3.684777 ustep: 1 ## iter: 2 value: 379.8359 mgc: 0.5242108 ustep: 1 ## iter: 3 value: 379.8347 mgc: 0.01584216 ustep: 1 ## iter: 4 value: 379.8347 mgc: 1.56739e-05 ustep: 1 ## iter: 5 mgc: 1.536471e-11 ## iter: 1 mgc: 1.536471e-11 ## outer mgc: 7.440148 ## iter: 1 value: 402.7536 mgc: 9.164175 ustep: 1 ## iter: 2 value: 385.0895 mgc: 2.045565 ustep: 1 ## iter: 3 value: 384.9128 mgc: 0.1921578 ustep: 1 ## iter: 4 value: 384.9128 mgc: 0.002191669 ustep: 1 ## iter: 5 value: 384.9128 mgc: 2.930951e-07 ustep: 1 ## iter: 6 mgc: 1.509903e-14 ## iter: 1 value: 534.4073 mgc: 21.58889 ustep: 1 ## iter: 2 value: 422.4273 mgc: 6.155377 ustep: 1 ## iter: 3 value: 417.6858 mgc: 1.107201 ustep: 1 ## iter: 4 value: 417.6729 mgc: 0.05840989 ustep: 1 ## iter: 5 value: 417.6729 mgc: 0.0001847432 ustep: 1 ## iter: 6 mgc: 2.057174e-09 ## iter: 1 mgc: 1.509903e-14 ## outer mgc: 10.74939 ## iter: 1 value: 370.7182 mgc: 8.277341 ustep: 1 ## iter: 2 value: 363.6895 mgc: 1.610508 ustep: 1 ## iter: 3 value: 363.6635 mgc: 0.1076835 ustep: 1 ## iter: 4 value: 363.6635 mgc: 0.0004992693 ustep: 1 ## iter: 5 value: 363.6635 mgc: 1.523622e-08 ustep: 1 ## mgc: 1.834644e-14 ## iter: 1 value: 377.9086 mgc: 0.253723 ustep: 1 ## iter: 2 value: 377.9086 mgc: 0.002233806 ustep: 1 ## iter: 3 value: 377.9086 mgc: 8.205234e-07 ustep: 1 ## iter: 4 mgc: 1.072198e-13 ## iter: 1 mgc: 1.072198e-13 ## outer mgc: 9.921071 ## iter: 1 value: 364.3054 mgc: 0.5134671 ustep: 1 ## iter: 2 value: 364.3043 mgc: 0.01642565 ustep: 1 ## iter: 3 value: 364.3043 mgc: 3.544357e-05 ustep: 1 ## iter: 4 mgc: 1.588341e-10 ## iter: 1 value: 327.3533 mgc: 2.353158 ustep: 1 ## iter: 2 value: 327.3145 mgc: 0.1570107 ustep: 1 ## iter: 3 value: 327.3145 mgc: 0.001211215 ustep: 1 ## iter: 4 value: 327.3145 mgc: 6.693012e-08 ustep: 1 ## iter: 5 mgc: 6.383782e-15 ## iter: 1 mgc: 1.588341e-10 ## outer mgc: 6.457193 ## iter: 1 value: 344.6071 mgc: 1.465723 ustep: 1 ## iter: 2 value: 344.5333 mgc: 0.1502923 ustep: 1 ## iter: 3 value: 344.5333 mgc: 0.001418727 ustep: 1 ## iter: 4 value: 344.5333 mgc: 1.388773e-07 ustep: 1 ## iter: 5 mgc: 7.015222e-15 ## iter: 1 value: 356.6117 mgc: 0.529421 ustep: 1 ## iter: 2 value: 356.6084 mgc: 0.02412715 ustep: 1 ## iter: 3 value: 356.6084 mgc: 5.9255e-05 ustep: 1 ## iter: 4 mgc: 4.002466e-10 ## iter: 1 mgc: 4.002466e-10 ## outer mgc: 2.669901 ## iter: 1 value: 364.9294 mgc: 0.5706286 ustep: 1 ## iter: 2 value: 364.9294 mgc: 0.004675022 ustep: 1 ## iter: 3 value: 364.9294 mgc: 6.432198e-07 ustep: 1 ## iter: 4 mgc: 4.884981e-14 ## iter: 1 value: 367.8286 mgc: 3.57254 ustep: 1 ## iter: 2 value: 367.5086 mgc: 0.3664021 ustep: 1 ## iter: 3 value: 367.5086 mgc: 0.005250454 ustep: 1 ## iter: 4 value: 367.5086 mgc: 1.551418e-06 ustep: 1 ## iter: 5 mgc: 1.152828e-13 ## iter: 1 mgc: 4.884981e-14 ## outer mgc: 3.11325 ## iter: 1 value: 377.3664 mgc: 0.8732301 ustep: 1 ## iter: 2 value: 377.365 mgc: 0.02030594 ustep: 1 ## iter: 3 value: 377.365 mgc: 1.603306e-05 ustep: 1 ## iter: 4 mgc: 1.155523e-11 ## iter: 1 mgc: 1.155523e-11 ## outer mgc: 4.351084 ## iter: 1 value: 391.2425 mgc: 1.092614 ustep: 1 ## iter: 2 value: 391.241 mgc: 0.03574139 ustep: 1 ## iter: 3 value: 391.241 mgc: 5.513449e-05 ustep: 1 ## iter: 4 mgc: 1.286748e-10 ## iter: 1 mgc: 1.286748e-10 ## outer mgc: 3.076712 ## iter: 1 value: 381.7407 mgc: 0.6545439 ustep: 1 ## iter: 2 value: 381.7403 mgc: 0.01677527 ustep: 1 ## iter: 3 value: 381.7403 mgc: 1.770063e-05 ustep: 1 ## iter: 4 mgc: 1.855079e-11 ## iter: 1 value: 387.8669 mgc: 0.2111348 ustep: 1 ## iter: 2 value: 387.8669 mgc: 0.002191831 ustep: 1 ## iter: 3 value: 387.8669 mgc: 3.837711e-07 ustep: 1 ## iter: 4 mgc: 1.26097e-14 ## iter: 1 mgc: 1.26097e-14 ## outer mgc: 2.158236 ## iter: 1 value: 394.859 mgc: 0.2812286 ustep: 1 ## iter: 2 value: 394.859 mgc: 0.002026409 ustep: 1 ## iter: 3 value: 394.859 mgc: 3.013404e-07 ustep: 1 ## iter: 4 mgc: 1.104672e-14 ## iter: 1 mgc: 1.104672e-14 ## outer mgc: 2.034748 ## iter: 1 value: 401.1775 mgc: 0.450018 ustep: 1 ## iter: 2 value: 401.1774 mgc: 0.004096185 ustep: 1 ## iter: 3 value: 401.1774 mgc: 6.014281e-07 ustep: 1 ## iter: 4 mgc: 1.154632e-14 ## iter: 1 value: 416.6716 mgc: 0.8191125 ustep: 1 ## iter: 2 value: 416.6715 mgc: 0.01138783 ustep: 1 ## iter: 3 value: 416.6715 mgc: 4.737287e-06 ustep: 1 ## iter: 4 mgc: 8.484324e-13 ## iter: 1 mgc: 8.484324e-13 ## outer mgc: 1.702276 ## iter: 1 value: 425.4947 mgc: 0.6661809 ustep: 1 ## iter: 2 value: 425.4946 mgc: 0.01192623 ustep: 1 ## iter: 3 value: 425.4946 mgc: 4.731394e-06 ustep: 1 ## iter: 4 mgc: 8.853612e-13 ## iter: 1 mgc: 8.853612e-13 ## outer mgc: 2.034039 ## iter: 1 value: 428.9727 mgc: 0.3281455 ustep: 1 ## iter: 2 value: 428.9727 mgc: 0.004324923 ustep: 1 ## iter: 3 value: 428.9727 mgc: 9.692598e-07 ustep: 1 ## iter: 4 mgc: 4.363176e-14 ## iter: 1 mgc: 4.363176e-14 ## outer mgc: 0.4653992 ## iter: 1 value: 428.3006 mgc: 0.06473722 ustep: 1 ## iter: 2 value: 428.3006 mgc: 0.0001445645 ustep: 1 ## iter: 3 mgc: 1.026396e-09 ## iter: 1 mgc: 1.026396e-09 ## outer mgc: 0.09116502 ## iter: 1 value: 428.2364 mgc: 0.00658129 ustep: 1 ## iter: 2 value: 428.2364 mgc: 3.309161e-06 ustep: 1 ## iter: 3 mgc: 7.97612e-13 ## iter: 1 mgc: 7.97612e-13 ## outer mgc: 0.04702646 ## iter: 1 value: 428.302 mgc: 0.003062686 ustep: 1 ## iter: 2 value: 428.302 mgc: 2.609464e-07 ustep: 1 ## iter: 3 mgc: 5.967449e-15 ## iter: 1 mgc: 5.967449e-15 ## outer mgc: 0.0004561847 ## iter: 1 value: 428.301 mgc: 8.169674e-05 ustep: 1 ## iter: 2 mgc: 2.319102e-10 ## iter: 1 mgc: 2.319102e-10 ## outer mgc: 2.120713e-05 ## iter: 1 mgc: 2.319102e-10 get_coefs(fit) ## iter: 1 mgc: 2.319102e-10 ## outer mgc: 2.120713e-05 ## iter: 1 value: 428.2936 mgc: 0.007893647 ustep: 1 ## iter: 2 value: 428.2936 mgc: 2.816726e-06 ustep: 1 ## iter: 3 mgc: 3.715916e-13 ## outer mgc: 0.1291841 ## iter: 1 value: 428.3085 mgc: 0.007885757 ustep: 1 ## iter: 2 value: 428.3085 mgc: 2.816468e-06 ustep: 1 ## iter: 3 mgc: 3.692602e-13 ## outer mgc: 0.1291358 ## iter: 1 value: 428.214 mgc: 0.00464869 ustep: 1 ## iter: 2 value: 428.214 mgc: 4.335762e-07 ustep: 1 ## iter: 3 mgc: 8.992806e-15 ## outer mgc: 0.0362467 ## iter: 1 value: 428.388 mgc: 0.004644043 ustep: 1 ## iter: 2 value: 428.388 mgc: 4.334062e-07 ustep: 1 ## iter: 3 mgc: 6.439294e-15 ## outer mgc: 0.03625438 ## iter: 1 value: 428.1967 mgc: 0.006239337 ustep: 1 ## iter: 2 value: 428.1967 mgc: 1.21095e-06 ustep: 1 ## iter: 3 mgc: 6.017409e-14 ## outer mgc: 0.08753317 ## iter: 1 value: 428.4052 mgc: 0.006221647 ustep: 1 ## iter: 2 value: 428.4052 mgc: 1.206346e-06 ustep: 1 ## iter: 3 mgc: 6.261658e-14 ## outer mgc: 0.08740283 ## outer mgc: 2.597914 ## Estimate Std. Error ## beta 2.44818565 0.09034647 ## tau 0.07198347 0.04792390 ## kappa 2.59791407 0.76483198 3.2.2 Spatiotemporal LGCP ndays &lt;- 2 locs &lt;- data.frame(x = xyt$x, y = xyt$y, t = xyt$t) w0 &lt;- 2 tmesh &lt;- INLA::inla.mesh.1d(seq(0, ndays, by = w0)) fit &lt;- fit_lgcp(locs = locs, sp = domain, smesh = smesh, tmesh = tmesh, parameters = c(beta = 0, tau = 1, kappa = 1, rho = 0.2)) ## Warning: 4 external pointers will be removed ## Optimizing tape... Done ## iter: 1 value: 518.8558 mgc: 9.69178 ustep: 0.8994163 ## iter: 2 value: 352.1387 mgc: 8.671286 ustep: 0.9483808 ## iter: 3 value: 332.8561 mgc: 2.414627 ustep: 0.973851 ## iter: 4 value: 332.3444 mgc: 0.3796963 ustep: 0.9868402 ## iter: 5 value: 332.3436 mgc: 0.01488855 ustep: 0.993399 ## iter: 6 value: 332.3436 mgc: 5.379539e-05 ustep: 0.9966944 ## iter: 7 value: 332.3436 mgc: 1.037112e-07 ustep: 0.998346 ## iter: 8 mgc: 1.519413e-10 ## iter: 1 mgc: 1.519413e-10 ## Matching hessian patterns... Done ## outer mgc: 286.9585 ## iter: 1 value: 345.9611 mgc: 2.140766 ustep: 1 ## iter: 2 value: 345.5366 mgc: 0.104814 ustep: 1 ## iter: 3 value: 345.5359 mgc: 0.006420566 ustep: 1 ## iter: 4 value: 345.5359 mgc: 2.161942e-05 ustep: 1 ## iter: 5 mgc: 2.223214e-10 ## iter: 1 mgc: 2.223214e-10 ## outer mgc: 5.416438 ## iter: 1 value: 447.8499 mgc: 1.969873 ustep: 1 ## iter: 2 value: 447.68 mgc: 0.1140927 ustep: 1 ## iter: 3 value: 447.68 mgc: 0.001680815 ustep: 1 ## iter: 4 value: 447.68 mgc: 9.058264e-07 ustep: 1 ## iter: 5 mgc: 2.516876e-13 ## iter: 1 mgc: 2.516876e-13 ## outer mgc: 5.576032 ## iter: 1 value: 659.9079 mgc: 2.905043 ustep: 1 ## iter: 2 value: 659.8212 mgc: 0.126931 ustep: 1 ## iter: 3 value: 659.8212 mgc: 0.002759595 ustep: 1 ## iter: 4 value: 659.8212 mgc: 1.121765e-06 ustep: 1 ## iter: 5 mgc: 1.6976e-13 ## iter: 1 value: 541.1307 mgc: 1.711116 ustep: 1 ## iter: 2 value: 541.1261 mgc: 0.03403901 ustep: 1 ## iter: 3 value: 541.1261 mgc: 0.0001451792 ustep: 1 ## iter: 4 mgc: 2.203859e-09 ## iter: 1 mgc: 2.203859e-09 ## outer mgc: 5.348311 ## iter: 1 value: 546.9014 mgc: 2.085702 ustep: 1 ## iter: 2 value: 545.9208 mgc: 0.2986195 ustep: 1 ## iter: 3 value: 545.9201 mgc: 0.008110388 ustep: 1 ## iter: 4 value: 545.9201 mgc: 6.222201e-06 ustep: 1 ## iter: 5 mgc: 3.621631e-12 ## iter: 1 mgc: 3.621631e-12 ## outer mgc: 1.435357 ## iter: 1 value: 536.5535 mgc: 2.266254 ustep: 1 ## iter: 2 value: 535.798 mgc: 0.2884635 ustep: 1 ## iter: 3 value: 535.7976 mgc: 0.006642251 ustep: 1 ## iter: 4 value: 535.7976 mgc: 3.835085e-06 ustep: 1 ## iter: 5 mgc: 1.296505e-12 ## iter: 1 value: 541.5788 mgc: 0.739168 ustep: 1 ## iter: 2 value: 541.5652 mgc: 0.03932166 ustep: 1 ## iter: 3 value: 541.5652 mgc: 0.0001279691 ustep: 1 ## iter: 4 mgc: 1.399683e-09 ## iter: 1 mgc: 1.399683e-09 ## outer mgc: 0.3280603 ## iter: 1 value: 546.2725 mgc: 0.1970036 ustep: 1 ## iter: 2 value: 546.2725 mgc: 0.00122573 ustep: 1 ## iter: 3 value: 546.2725 mgc: 7.997233e-08 ustep: 1 ## iter: 4 mgc: 2.742251e-14 ## iter: 1 mgc: 2.742251e-14 ## outer mgc: 0.4583343 ## iter: 1 value: 542.579 mgc: 0.1030731 ustep: 1 ## iter: 2 value: 542.579 mgc: 0.0007006543 ustep: 1 ## iter: 3 value: 542.579 mgc: 5.15095e-08 ustep: 1 ## iter: 4 mgc: 2.620126e-14 ## iter: 1 mgc: 2.620126e-14 ## outer mgc: 0.1228685 ## iter: 1 value: 544.8844 mgc: 0.05965421 ustep: 1 ## iter: 2 value: 544.8844 mgc: 0.0002784645 ustep: 1 ## iter: 3 mgc: 7.745592e-09 ## iter: 1 mgc: 7.745592e-09 ## outer mgc: 0.07424418 ## iter: 1 value: 544.4463 mgc: 0.01971116 ustep: 1 ## iter: 2 value: 544.4463 mgc: 4.000269e-05 ustep: 1 ## iter: 3 mgc: 1.898561e-10 ## iter: 1 mgc: 1.898561e-10 ## outer mgc: 0.008037084 ## iter: 1 value: 544.4318 mgc: 0.00344086 ustep: 1 ## iter: 2 value: 544.4318 mgc: 6.89621e-07 ustep: 1 ## iter: 3 mgc: 5.962592e-14 ## iter: 1 mgc: 5.962592e-14 ## outer mgc: 0.0008111555 ## iter: 1 value: 544.4385 mgc: 0.0003610607 ustep: 1 ## iter: 2 mgc: 5.154479e-09 ## iter: 1 mgc: 5.154479e-09 ## outer mgc: 0.0001077869 ## iter: 1 mgc: 5.154479e-09 get_coefs(fit) ## iter: 1 mgc: 5.154479e-09 ## outer mgc: 0.0001077869 ## iter: 1 value: 544.4382 mgc: 0.00515223 ustep: 1 ## iter: 2 value: 544.4382 mgc: 2.555828e-06 ustep: 1 ## iter: 3 mgc: 6.311479e-13 ## outer mgc: 0.004361833 ## iter: 1 value: 544.4388 mgc: 0.00514707 ustep: 1 ## iter: 2 value: 544.4388 mgc: 2.557479e-06 ustep: 1 ## iter: 3 mgc: 6.338402e-13 ## outer mgc: 0.00435769 ## iter: 1 value: 544.2326 mgc: 0.004852782 ustep: 1 ## iter: 2 value: 544.2326 mgc: 2.158663e-07 ustep: 1 ## iter: 3 mgc: 4.085621e-14 ## outer mgc: 0.02273045 ## iter: 1 value: 544.6445 mgc: 0.004847922 ustep: 1 ## iter: 2 value: 544.6445 mgc: 2.16009e-07 ustep: 1 ## iter: 3 mgc: 3.108624e-14 ## outer mgc: 0.02293385 ## iter: 1 value: 544.4108 mgc: 0.0009039216 ustep: 1 ## iter: 2 value: 544.4108 mgc: 3.490953e-08 ustep: 1 ## iter: 3 mgc: 3.330669e-14 ## outer mgc: 0.05563897 ## iter: 1 value: 544.4663 mgc: 0.0009017732 ustep: 1 ## iter: 2 value: 544.4663 mgc: 3.471919e-08 ustep: 1 ## iter: 3 mgc: 3.252953e-14 ## outer mgc: 0.05561237 ## iter: 1 value: 544.3657 mgc: 0.004975578 ustep: 1 ## iter: 2 value: 544.3657 mgc: 1.896277e-07 ustep: 1 ## iter: 3 mgc: 4.352074e-14 ## outer mgc: 0.02093011 ## iter: 1 value: 544.5112 mgc: 0.004971711 ustep: 1 ## iter: 2 value: 544.5112 mgc: 1.894794e-07 ustep: 1 ## iter: 3 mgc: 3.419487e-14 ## outer mgc: 0.02095997 ## outer mgc: 1 ## Estimate Std. Error ## rho 0.3195294 0.24628383 ## beta 0.8957975 0.47944607 ## tau 0.2680934 0.09133882 ## kappa 0.6811763 0.15365247 "],["marked.html", "Chapter 4 Marked log-Gaussian Cox Process 4.1 The fit_mlgcp() function 4.2 Fitting a marked LGCP", " Chapter 4 Marked log-Gaussian Cox Process 4.1 The fit_mlgcp() function args(fit_mlgcp) ## function (locs, sp, marks, smesh, parameters, methods, strfixed, ## strparam, idx, ...) ## NULL 4.2 Fitting a marked LGCP data(marked) loc.d &lt;- 3 * cbind(c(0, 1, 1, 0, 0), c(0, 0, 1, 1, 0)) domain &lt;- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(loc.d)),&#39;0&#39;))) smesh &lt;- INLA::inla.mesh.2d(loc.domain = loc.d, offset = c(0.3, 1), max.edge = c(0.3, 0.7), cutoff = 0.05) locs &lt;- cbind(x = marked$x, y = marked$y) marks &lt;- cbind(m1 = marked$m1, m2 = marked$m2, m3 = marked$m3) param &lt;- list(beta = matrix(0, nrow = ncol(marks), ncol = ncol(marks) + 1) , tau = rep(1, 4), kappa = rep(1, 4), betaresp = rep(0, ncol(marks)), betapp = 0) ## c(1,1,1) share all marks with point process, idx[3, 3] = 1 ## means that the second mark will be shared with the third mark idx &lt;- cbind(c(1, 1, 1), matrix(0, nrow = ncol(marks), ncol = ncol(marks))) idx[3, 3] = 1 ## number of &quot;structual&quot; parameters to be estimted relateing to marks ## only referenced as log_sigma for Normal and log_scale for gamma strparam &lt;- c(1, 0, 1) ## matrix of &quot;structual&quot; fixed parameters relateing to marks ## e.g., number of trials for binomial, effort for poisson strfixed &lt;- cbind(rep(log(0.25), nrow(marks)), 1, 2) fit &lt;- fit_mlgcp(locs = locs, marks = marks, sp = domain, smesh = smesh, parameters = param, methods = c(0, 2, 3), strfixed = strfixed, strparam = strparam, idx = idx) get_coefs(fit) "],["stelfi.html", "Chapter 5 Spatiotemporal self-exciting model 5.1 The fit_stelfi() function 5.2 Hawkes spatial 5.3 Hawkes spde", " Chapter 5 Spatiotemporal self-exciting model 5.1 The fit_stelfi() function args(fit_stelfi) ## function (times, locs, sp, smesh, parameters, gaussian = TRUE, ## ...) ## NULL 5.2 Hawkes spatial data(xyt_stelfi) locs &lt;- cbind(x = xyt_stelfi$x, y = xyt_stelfi$y) times &lt;- xyt_stelfi$t loc.d &lt;- cbind(c(-1, 1, 1, -1, -1), c(-1, -1, 1, 1, -1)) domain &lt;- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(loc.d)),&#39;0&#39;))) smesh &lt;- INLA::inla.mesh.2d(boundary = INLA::inla.sp2segment(domain), max.edge = 0.75, cutoff = 0.3) param &lt;- list( mu = 5, alpha = 1, beta = 3, xsigma = 0.2, ysigma = 0.2, rho = 0.8) fit &lt;- fit_stelfi(times = times, locs = locs, sp = domain, smesh = smesh, parameters = param, gaussian = TRUE) get_coefs(fit) 5.3 Hawkes spde ## issues with time.... param &lt;- list( mu = 5, alpha = 1, beta = 3, kappa = 0.9, tau = 1, xsigma = 0.2, ysigma = 0.2, rho = 0.8) fit &lt;- fit_stelfi(times = times, locs = locs, sp = domain, smesh = smesh, parameters = param, gaussian = FALSE) get_coefs(fit) "],["comparing-inla-and-stelfi-fitting-lgcps.html", "Chapter 6 Comparing INLA and stelfi fitting LGCPs", " Chapter 6 Comparing INLA and stelfi fitting LGCPs "],["intro.html", "Chapter 7 Introduction", " Chapter 7 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 7. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 7.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 7.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 7.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 7.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2021) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],["references.html", "References", " References "]]
