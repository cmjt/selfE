[["index.html", "Fitting models using stelfi Introduction Installing stelfi", " Fitting models using stelfi Introduction Installing stelfi The stelfi package can be installed from Github: devtools::install_github(&quot;cmjt/stelfi&quot;) Compiling templates Before using the TMB templates in stelfi you should use compile_stelfi() to compile them: ## Warning: namespace &#39;lgcp&#39; is not available and has been replaced ## by .GlobalEnv when processing object &#39;xyt&#39; library(stelfi) compile_stelfi() "],["hawkes.html", "Chapter 1 Hawkes process 1.1 The fit_hawkes() function 1.2 The fit_hawkes_cbf() function", " Chapter 1 Hawkes process A univariate Hawkes process is defined to be a self-exciting temporal point process where the conditional intensity function is given by \\[\\lambda(t) = \\mu(t) + \\Sigma_{i:\\tau_i&lt;t}\\nu(t-\\tau_i)\\] where where \\(\\mu(t)\\) is the background rate of the process and \\(\\Sigma_{i:\\tau_i&lt;t}\\nu(t-\\tau_i)\\) is some historic temporal dependence. First introduced by AG (1971) 1.1 The fit_hawkes() function devtools::load_all(&quot;~/Git/stelfi&quot;) args(fit_hawkes) ## function (times, parameters, model = 1, marks = c(rep(1, length(times))), ## tmb_silent = TRUE, optim_silent = TRUE, ...) ## NULL Retweets A NIWA scientist found a working USB in the scat of a leopard seal, they then tweeted about it in the hopes of finding its owner. data(retweets_niwa) head(retweets_niwa) ## [1] &quot;2019-02-07 06:50:08 UTC&quot; &quot;2019-02-07 06:50:08 UTC&quot; ## [3] &quot;2019-02-07 06:49:22 UTC&quot; &quot;2019-02-07 06:48:48 UTC&quot; ## [5] &quot;2019-02-07 06:47:52 UTC&quot; &quot;2019-02-07 06:47:42 UTC&quot; ## numeric time stamps times &lt;- unique(sort(as.numeric(difftime(retweets_niwa ,min(retweets_niwa),units = &quot;mins&quot;)))) (#fig:plot hist)Observed counts of retweet times. params &lt;- c(mu = 9, alpha = 3, beta = 10) ## must have compiled TMB templates first use compile_stelfi() fit &lt;- fit_hawkes(times = times,parameters = params) ## print out estimated parameters pars &lt;- get_coefs(fit) pars ## Estimate Std. Error ## mu 0.06328099 0.017783908 ## alpha 0.07596531 0.007777899 ## beta 0.07911346 0.008109789 show_hawkes(times = times, mu = pars[1,1], alpha = pars[2,1], beta = pars[3,1]) show_hawkes_GOF(times = times, mu = pars[1,1], alpha = pars[2,1], beta = pars[3,1], return_values = FALSE) ETAS marked model A univariate marked Hawkes process is defined to be a self-exciting temporal point process where the conditional intensity function is given by \\[\\lambda(t) = \\mu(t) + \\Sigma_{i:\\tau_i&lt;t}\\nu(t-\\tau_i)\\] where where \\(\\mu(t)\\) is the background rate of the process and \\(\\Sigma_{i:\\tau_i&lt;t}\\nu(t-\\tau_i)\\) is some historic temporal dependence. data(&quot;earthquakes&quot;) head(earthquakes) ## origintime longitude latitude magnitude depth ## 1 2014-12-24 07:46:00 172.7133 -43.57944 3.208996 13.671875 ## 2 2014-12-24 06:43:00 172.7204 -43.55752 4.109075 5.820312 ## 3 2014-12-14 08:53:00 172.3641 -43.62563 3.240377 5.058594 ## 4 2014-12-12 13:37:00 172.3680 -43.63492 4.459034 9.394531 ## 5 2014-11-20 08:24:00 172.7836 -43.42493 3.116447 10.039062 ## 6 2014-11-18 14:19:00 172.7936 -43.48970 3.158710 11.269531 earthquakes &lt;- earthquakes[order(earthquakes$origintime),] earthquakes &lt;- earthquakes[!duplicated(earthquakes$origintime),] times &lt;- earthquakes$origintime times &lt;- as.numeric(difftime(times , min(times), units = &quot;mins&quot;)) marks &lt;- earthquakes$magnitude params &lt;- c(mu = 3, alpha = 0.05, beta = 1) ## must have compiled TMB templates first use compile_stelfi() fit &lt;- fit_hawkes(times = times, parameters = params, marks = marks) ## Warning: 2 external pointers will be removed ## print out estimated parameters pars &lt;- get_coefs(fit) pars ## Estimate Std. Error ## mu 0.0002001766 1.206014e-05 ## alpha 0.0005125373 2.934243e-05 ## beta 0.0020558328 1.204552e-04 show_hawkes(times = times, mu = pars[1,1], alpha = pars[2,1], beta = pars[3,1], marks = marks) show_hawkes_GOF(times = times, mu = pars[1,1], alpha = pars[2,1], beta = pars[3,1], marks = marks, return_values = FALSE) 1.2 The fit_hawkes_cbf() function args(fit_hawkes_cbf) ## function (times, parameters, model = 1, marks = c(rep(1, length(times))), ## background, background_integral, background_parameters, background_min, ## tmb_silent = TRUE, optim_silent = TRUE) ## NULL References "],["references.html", "References", " References "]]
