% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_lgcp.r, R/fit_mlgcp.r
\name{fit_lgcp}
\alias{fit_lgcp}
\alias{simulate_lgcp}
\alias{fit_mlgcp}
\title{Spatial or spatiotemporal log-Gaussian Cox process (LGCP)}
\usage{
fit_lgcp(
  locs,
  sf,
  smesh,
  tmesh,
  parameters = list(),
  covariates,
  tmb_silent = TRUE,
  nlminb_silent = TRUE,
  ...
)

simulate_lgcp(parameters, sf, smesh, tmesh, covariates, all = FALSE)

fit_mlgcp(
  locs,
  sf,
  marks,
  smesh,
  parameters = list(),
  methods,
  strfixed = matrix(1, nrow = nrow(locs), ncol = ncol(marks)),
  fields = rep(1, ncol(marks)),
  covariates,
  pp_covariates,
  marks_covariates,
  tmb_silent = TRUE,
  nlminb_silent = TRUE,
  ...
)
}
\arguments{
\item{locs}{A \code{data.frame} of \code{x} and \code{y} locations, 2xn.}

\item{sf}{An \code{sf} of type \code{POLYGON} specifying the region
of the domain.}

\item{smesh}{A spatial mesh returned by \code{INLA::inla.mesh.2d()}.}

\item{tmesh}{Optional, a temporal mesh returned by \code{\INLA::inla.mesh.1d()}.}

\item{parameters}{a list of named parameters:
log_tau, log_kappa, betamarks, betapp, marks_coefs_pp.
 @param methods An integer value:
\itemize{
\item \code{0} (default), Gaussian distribution, parameter estimated is mean;
\item \code{1}, Poisson distribution, parameter estimated is intensity;
\item \code{2}, binomial distribution, parameter estimated is logit/probability;
\item \code{3}, gamma distribution, the implementation in TMB is shape-scale.
}}

\item{covariates}{Covariate(s) corresponding to each area in the spatial mesh}

\item{tmb_silent}{Logical, default \code{TRUE}:
TMB inner optimization tracing information will be printed.}

\item{nlminb_silent}{Logical, default \code{TRUE}:
print function and parameters every iteration.}

\item{...}{optional extra arguments to pass into \code{stats::nlminb()}.}

\item{all}{Logical, if \code{TRUE} then all model components are returned.}

\item{marks}{A matrix of marks for each observation of the point pattern.}

\item{strfixed}{A matrix of fixed structural parameters, defined for each event and mark.
Defaults to \code{1}. If mark distribution
\itemize{
\item Normal, then this is the log of standard deviation;
\item Poisson, then not used;
\item Binomial, then this is the number of trials;
\item Gamma, then this is the log of the scale.
}}

\item{fields}{A binary vector indicating whether there is a new random
field for each mark. By default, each mark has its own random field.}

\item{pp_covariates}{Which columns of the covariates apply to the point process}

\item{marks_covariates}{Which columns of the covariates apply to the marks.
By default, all covariates apply to the marks only.}
}
\value{
A named list. If \code{all = FALSE} then only the simulated values of
the GMRF at each mesh node are returned, \code{x}, alongside the number of
events, \code{y}, simulated at each node.
}
\description{
Fit a LGCP using \code{TMB} and the
\code{R_inla} namespace for the spde construction of the latent field.

\code{simulate_lgcp} simulates a log-Gaussian Cox process (LGCP) using the
\code{TMB} \code{C++} template. If \code{rho} is supplied in \code{parameters}
as well as \code{tmesh} then times knots will also be returned.

Fit a marked LGCP using \code{TMB} and the
\code{R_inla} namespace for the spde construction of the latent field.
}
\examples{
\donttest{
### ********************** ###
## A spatial only LGCP
### ********************** ###
data(xyt, package = "stelfi")
domain <- sf::st_as_sf(xyt$window)
locs <- data.frame(x = xyt$x, y = xyt$y)
bnd <- INLA::inla.mesh.segment(as.matrix(sf::st_coordinates(domain)[, 1:2]))
smesh <- INLA::inla.mesh.2d(boundary = bnd,
max.edge = 0.75, cutoff = 0.3)
fit <- fit_lgcp(locs = locs, sf = domain, smesh = smesh,
parameters = c(beta = 0, log_tau = log(1), log_kappa = log(1)))
### ********************** ###
## A spatiotemporal LGCP, AR(1)
### ********************** ###
ndays <- 2
locs <- data.frame(x = xyt$x, y = xyt$y, t = xyt$t)
w0 <- 2
tmesh <- INLA::inla.mesh.1d(seq(0, ndays, by = w0))
fit <- fit_lgcp(locs = locs, sf = domain, smesh = smesh, tmesh = tmesh,
 parameters = c(beta = 0, log_tau = log(1), log_kappa = log(1), atanh_rho = 0.2))
}
\donttest{
data(xyt, package = "stelfi")
domain <- sf::st_as_sf(xyt$window)
bnd <- INLA::inla.mesh.segment(as.matrix(sf::st_coordinates(domain)[, 1:2]))
smesh <- INLA::inla.mesh.2d(boundary = bnd,
max.edge = 0.75, cutoff = 0.3)
parameters <- c(beta = 1, log_tau = log(1), log_kappa = log(1))
simulate_lgcp(parameters = parameters, sf = domain, smesh = smesh)
## spatiotemporal
ndays <- 2
w0 <- 2
tmesh <- INLA::inla.mesh.1d(seq(0, ndays, by = w0))
parameters <- c(beta = 1, log_tau = log(1), log_kappa = log(1), atanh_rho = 0.2)
simulate_lgcp(parameters = parameters, sf = domain, smesh = smesh, tmesh = tmesh)
}
\donttest{
### ********************** ###
## A joint likelihood marked LGCP model
### ********************** ###
data(marked, package = "stelfi")
loc.d <- 3 * cbind(c(0, 1, 1, 0, 0), c(0, 0, 1, 1, 0))
domain <- sf::st_sf(geometry = sf::st_sfc(sf::st_polygon(list(loc.d))))
smesh <- INLA::inla.mesh.2d(loc.domain = loc.d, offset = c(0.3, 1),
max.edge = c(0.3, 0.7), cutoff = 0.05)
locs <- cbind(x = marked$x, y = marked$y)
marks <- cbind(m1 = marked$m1) ## Gaussian mark
parameters <- list(betamarks = matrix(0, nrow = 1, ncol = ncol(marks)),
log_tau = rep(log(1), 2), log_kappa = rep(log(1), 2),
marks_coefs_pp = rep(0, ncol(marks)), betapp = 0)
fit <- fit_mlgcp(locs = locs, marks = marks,
sf = domain, smesh = smesh,
parameters = parameters, methods = 0,fields = 1)
}
}
